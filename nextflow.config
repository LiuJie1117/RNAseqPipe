params{
    fastq_ext = '*_{1,2}.fq.gz'
    input_folder="./"
    designfile=''
    out_folder= './'
    comp_file=''

    dapath = '/data/software/DAtools.jar'
    star_index = '/data/database/human/hg38/RSEM_STAR_Index/GRCh38'
    gtf = '/data/database/human/hg38/annotation/gencode.v24.annotation.gtf'


    skip_qc=false
    singleEnd = false

}

process.cache = 'deep'


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
    enabled = true
    file = "RNAseqPipe_timeline.html"
}
report {
    enabled = true
    file = "RNAseqPipe_report.html"
}
trace {
    enabled = true
    file = "RNAseqPipe_trace.txt"
}

manifest {
    name = 'RNAseqPipe'
    author = 'RNAseq pipe in sysucc.'
    mainScript = 'main.nf'
    nextflowVersion = '>=0.32.0'
    version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}